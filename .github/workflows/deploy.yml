name: Deploy to Fargate

on:
  push:
    branches:
      - main
  #workflow_dispatch: # Allows manual execution

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: accip-api
  ECS_CLUSTER: brilliant-koala-90tu8a
  ECS_SERVICE: accip-api-service-5mt9c4pp
  ECS_TASK_DEFINITION: task-definition.json
  AWS_ROLE_ARN: arn:aws:iam::489582127457:role/GitHubActionsRole

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to checkout code

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # commented the test as we need to create the database
      # - name: Run tests
      #   run: |
      #     python -m unittest tests/test_api.py -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run and test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Run the Docker image in the background
          docker run -d -p 8003:8003 --name test-container $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Wait for the container to start (adjust sleep time if needed)
          sleep 10
          # Test the health check endpoint
          curl -f http://localhost:8003/health || exit 1
          # Stop and remove the test container
          docker stop test-container
          docker rm test-container

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Render Amazon ECS task definition
      #   id: render-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: accip-api
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
