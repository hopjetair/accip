name: Deploy to Fargate

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch: # Allows manual execution

env:
  AWS_REGION: ap-southeast-2 # aws region
  ECR_REPOSITORY: non_ai_api # ECR Repository name
  ECS_CLUSTER: beloved-wolf-0mjus8 # ECS Cluster name
  ECS_SERVICE: fastapi_accip-api-service-fb4p9ip1 #ECS service name
  ECS_TASK_DEFINITION: task-definition.json # task defination file name  stored in D:\dominic\github\aimlops\accip\task-definition.json
  AWS_ROLE_ARN: arn:aws:iam::489582127457:role/GitHubActionsRole #aws iam role allowing github action to execute thing in AWS

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to checkout code

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # commented the test as we need to create the database
      # - name: Run tests
      #   run: |
      #     python -m unittest tests/test_api.py -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT

      - name: Run and test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          docker run -d -p 8003:8003 \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
            -e AWS_REGION=$AWS_REGION \
            --name test-container $ECR_REGISTRY/$ECR_REPOSITORY
          sleep 30
          docker logs test-container
          docker exec test-container curl -f http://localhost:8003/health || exit 1
          docker stop test-container
          docker rm test-container

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: accip-api
          image: ${{ steps.build-image.outputs.image }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
