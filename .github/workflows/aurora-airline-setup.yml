# .github/workflows/aurora-airline-setup.yml
name: Aurora Airline Database Setup
on:
  #   push:
  #     branches:
  #       - main
  workflow_dispatch: # Allows manual triggering

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout code

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::489582127457:role/GitHubActionsRole # Matches deploy.yml
          aws-region: ap-southeast-2

      - name: Install AWS CLI, PostgreSQL client, and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          rm -rf awscliv2.zip aws

      - name: Install Python dependencies
        run: |
          pip install psycopg2-binary faker

      - name: Retrieve AWS Secrets
        run: |
          echo "DB_CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id db_credentials --query SecretString --output text)" >> $GITHUB_ENV
          echo "API_SECRETS=$(aws secretsmanager get-secret-value --secret-id api_secrets --query SecretString --output text)" >> $GITHUB_ENV

      - name: Parse Secrets
        run: |
          DB_USER=$(echo $DB_CREDENTIALS | jq -r '.db_user')
          DB_PASS=$(echo $DB_CREDENTIALS | jq -r '.db_pass' | tr -d '[:space:]')
          API_KEY=$(echo $API_SECRETS | jq -r '.api_key')
          API_SECRET=$(echo $API_SECRETS | jq -r '.api_secret')
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV
          echo "API_SECRET=$API_SECRET" >> $GITHUB_ENV
        env:
          DB_CREDENTIALS: ${{ env.DB_CREDENTIALS }}
          API_SECRETS: ${{ env.API_SECRETS }}

      - name: Compare DB_PASS with Hardcoded Password
        run: |
          # Set the hardcoded password that worked
          HARDCODED_PASS="SecurePass123!"
          DB_PASS_VALUE="$DB_PASS"

          # Check if lengths match
          if [ ${#HARDCODED_PASS} -ne ${#DB_PASS_VALUE} ]; then
            echo "Error: Password lengths do not match. Hardcoded length: ${#HARDCODED_PASS}, DB_PASS length: ${#DB_PASS_VALUE}"
            exit 1
          fi

          # Compare each character
          mismatch=false
          for ((i=0; i<${#HARDCODED_PASS}; i++)); do
            if [ "${HARDCODED_PASS:$i:1}" != "${DB_PASS_VALUE:$i:1}" ]; then
              echo "Mismatch at position $i: Hardcoded '${HARDCODED_PASS:$i:1}' vs DB_PASS '${DB_PASS_VALUE:$i:1}'"
              mismatch=true
            fi
          done

          if [ "$mismatch" = true ]; then
            echo "Error: Passwords do not match character-for-character"
            exit 1
          else
            echo "Passwords match character-for-character"
          fi
        env:
          DB_PASS: ${{ env.DB_PASS }}

      - name: Test PostgreSQL Connection
        env:
          PGPASSWORD: "SecurePass123!"
          PGSSLMODE: require
        run: |
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME  -c "SELECT 1"

    #   - name: Apply airline schema
    #     env:
    #        PGPASSWORD: $DB_PASS
    #     run: |
    #       psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f db_infra/scripts/create_airline_schema.sql

    #   - name: Run generator script
    #     run: |
    #       python db_infra/scripts/generator.py
    #     env:
    #       DB_HOST: ${{ env.DB_HOST }}
    #       DB_PORT: ${{ env.DB_PORT }}
    #       DB_NAME: ${{ env.DB_NAME }}
    #       DB_USER: ${{ env.DB_USER }}
    #       DB_PASS: ${{ env.DB_PASS }}
    #       API_KEY: ${{ env.API_KEY }}
    #       API_SECRET: ${{ env.API_SECRET }}
    #       AWS_REGION: ${{ env.AWS_REGION }}
    #       NONPROD: ${{ env.NONPROD }}

    #   - name: Verify database connection
    #     run: |
    #       psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c "\dt"
    #     env:
    #       PGPASSWORD: $DB_PASS
