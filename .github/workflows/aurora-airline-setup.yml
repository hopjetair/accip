# .github/workflows/aurora-airline-setup.yml
name: Aurora Airline Database Setup
on:
  #   push:
  #     branches:
  #       - main
  workflow_dispatch: # Allows manual triggering

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout code

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::109038807292:role/GitHubActionsRole # Matches deploy.yml
          aws-region: ap-south-1

      - name: Install AWS CLI, PostgreSQL client, and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          rm -rf awscliv2.zip aws

      # - name: Install Python dependencies
      #   run: |
      #     pip install psycopg2-binary faker
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Retrieve AWS Secrets
        run: |
          echo "DB_CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id db_credentials --query SecretString --output text)" >> $GITHUB_ENV
          echo "API_SECRETS=$(aws secretsmanager get-secret-value --secret-id api_secrets --query SecretString --output text)" >> $GITHUB_ENV

      - name: Parse Secrets
        run: |
          DB_USER=$(echo $DB_CREDENTIALS | jq -r '.db_user')
          DB_PASS=$(echo $DB_CREDENTIALS | jq -r '.db_pass' | tr -d '[:space:]')
          API_KEY=$(echo $API_SECRETS | jq -r '.api_key')
          API_SECRET=$(echo $API_SECRETS | jq -r '.api_secret')
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV
          echo "API_SECRET=$API_SECRET" >> $GITHUB_ENV
        env:
          DB_CREDENTIALS: ${{ env.DB_CREDENTIALS }}
          API_SECRETS: ${{ env.API_SECRETS }}

      - name: Set Environment Variables
        run: |
          echo "DB_HOST=postgressql-hopjetairline-1.cniwous8qb34.ap-south-1.rds.amazonaws.com" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=hopjetairline_db" >> $GITHUB_ENV
          echo "AWS_REGION=ap-south-1" >> $GITHUB_ENV
          echo "NONPROD=false" >> $GITHUB_ENV

      - name: Run generator script
        run: |
          python db_infra/scripts/generator.py
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASS: ${{ env.DB_PASS }}
          API_KEY: ${{ env.API_KEY }}
          API_SECRET: ${{ env.API_SECRET }}
          AWS_REGION: ${{ env.AWS_REGION }}
          NONPROD: ${{ env.NONPROD }}

      - name: Verify database connection
        run: |
          psql -h $DB_HOST -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }} -c "\dt"
        env:
          PGPASSWORD: ${{ env.DB_PASS }}
          PGSSLMODE: require
          DB_HOST: ${{ env.DB_HOST }}

      - name: Verify table record count
        run: |
          python db_infra/scripts/verify_records.py
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASS: ${{ env.DB_PASS }}
